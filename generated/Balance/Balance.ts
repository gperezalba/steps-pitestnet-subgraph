// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class Balance extends SmartContract {
  static bind(address: Address): Balance {
    return new Balance("Balance", address);
  }

  getBalance(_address: Address): BigInt {
    let result = super.call("getBalance", [
      EthereumValue.fromAddress(_address)
    ]);

    return result[0].toBigInt();
  }

  try_getBalance(_address: Address): CallResult<BigInt> {
    let result = super.tryCall("getBalance", [
      EthereumValue.fromAddress(_address)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }
}

export class FCall extends EthereumCall {
  get inputs(): FCall__Inputs {
    return new FCall__Inputs(this);
  }

  get outputs(): FCall__Outputs {
    return new FCall__Outputs(this);
  }
}

export class FCall__Inputs {
  _call: FCall;

  constructor(call: FCall) {
    this._call = call;
  }
}

export class FCall__Outputs {
  _call: FCall;

  constructor(call: FCall) {
    this._call = call;
  }
}

export class ConstructorCall extends EthereumCall {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}
