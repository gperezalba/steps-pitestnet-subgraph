// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class Transfer extends EthereumEvent {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get tokenAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get kind(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get commission(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get data(): Bytes {
    return this._event.parameters[5].value.toBytes();
  }
}

export class Receive extends EthereumEvent {
  get params(): Receive__Params {
    return new Receive__Params(this);
  }
}

export class Receive__Params {
  _event: Receive;

  constructor(event: Receive) {
    this._event = event;
  }

  get tokenAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Wallet__getExchangeInfoSendingResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromUnsignedBigInt(this.value0));
    map.set("value1", EthereumValue.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Wallet__getInfoResult {
  value0: Array<Address>;
  value1: Array<BigInt>;
  value2: Array<string>;

  constructor(
    value0: Array<Address>,
    value1: Array<BigInt>,
    value2: Array<string>
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromAddressArray(this.value0));
    map.set("value1", EthereumValue.fromUnsignedBigIntArray(this.value1));
    map.set("value2", EthereumValue.fromStringArray(this.value2));
    return map;
  }
}

export class Wallet__getExchangeInfoReceivingResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromUnsignedBigInt(this.value0));
    map.set("value1", EthereumValue.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Wallet__getInfoPartialResult {
  value0: Array<Address>;
  value1: Array<BigInt>;
  value2: Array<string>;

  constructor(
    value0: Array<Address>,
    value1: Array<BigInt>,
    value2: Array<string>
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromAddressArray(this.value0));
    map.set("value1", EthereumValue.fromUnsignedBigIntArray(this.value1));
    map.set("value2", EthereumValue.fromStringArray(this.value2));
    return map;
  }
}

export class Wallet extends SmartContract {
  static bind(address: Address): Wallet {
    return new Wallet("Wallet", address);
  }

  isToken(param0: Address): boolean {
    let result = super.call("isToken", [EthereumValue.fromAddress(param0)]);

    return result[0].toBoolean();
  }

  try_isToken(param0: Address): CallResult<boolean> {
    let result = super.tryCall("isToken", [EthereumValue.fromAddress(param0)]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  tokens(param0: BigInt): Address {
    let result = super.call("tokens", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_tokens(param0: BigInt): CallResult<Address> {
    let result = super.tryCall("tokens", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  getTransferExchangeInfoReceiving(
    _sendingToken: Address,
    _transferingToken: Address,
    _receivingAmount: BigInt
  ): BigInt {
    let result = super.call("getTransferExchangeInfoReceiving", [
      EthereumValue.fromAddress(_sendingToken),
      EthereumValue.fromAddress(_transferingToken),
      EthereumValue.fromUnsignedBigInt(_receivingAmount)
    ]);

    return result[0].toBigInt();
  }

  try_getTransferExchangeInfoReceiving(
    _sendingToken: Address,
    _transferingToken: Address,
    _receivingAmount: BigInt
  ): CallResult<BigInt> {
    let result = super.tryCall("getTransferExchangeInfoReceiving", [
      EthereumValue.fromAddress(_sendingToken),
      EthereumValue.fromAddress(_transferingToken),
      EthereumValue.fromUnsignedBigInt(_receivingAmount)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  setDexOrder(
    _tokenAddress: Address,
    _value: BigInt,
    _receiving: Address,
    _price: BigInt,
    _side: BigInt,
    _exchangeAddress: Address
  ): Bytes {
    let result = super.call("setDexOrder", [
      EthereumValue.fromAddress(_tokenAddress),
      EthereumValue.fromUnsignedBigInt(_value),
      EthereumValue.fromAddress(_receiving),
      EthereumValue.fromUnsignedBigInt(_price),
      EthereumValue.fromUnsignedBigInt(_side),
      EthereumValue.fromAddress(_exchangeAddress)
    ]);

    return result[0].toBytes();
  }

  try_setDexOrder(
    _tokenAddress: Address,
    _value: BigInt,
    _receiving: Address,
    _price: BigInt,
    _side: BigInt,
    _exchangeAddress: Address
  ): CallResult<Bytes> {
    let result = super.tryCall("setDexOrder", [
      EthereumValue.fromAddress(_tokenAddress),
      EthereumValue.fromUnsignedBigInt(_value),
      EthereumValue.fromAddress(_receiving),
      EthereumValue.fromUnsignedBigInt(_price),
      EthereumValue.fromUnsignedBigInt(_side),
      EthereumValue.fromAddress(_exchangeAddress)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  version(): i32 {
    let result = super.call("version", []);

    return result[0].toI32();
  }

  try_version(): CallResult<i32> {
    let result = super.tryCall("version", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toI32());
  }

  getExchangeInfoSending(
    _sendingToken: Address,
    _receivingToken: Address,
    _sendingAmount: BigInt
  ): Wallet__getExchangeInfoSendingResult {
    let result = super.call("getExchangeInfoSending", [
      EthereumValue.fromAddress(_sendingToken),
      EthereumValue.fromAddress(_receivingToken),
      EthereumValue.fromUnsignedBigInt(_sendingAmount)
    ]);

    return new Wallet__getExchangeInfoSendingResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getExchangeInfoSending(
    _sendingToken: Address,
    _receivingToken: Address,
    _sendingAmount: BigInt
  ): CallResult<Wallet__getExchangeInfoSendingResult> {
    let result = super.tryCall("getExchangeInfoSending", [
      EthereumValue.fromAddress(_sendingToken),
      EthereumValue.fromAddress(_receivingToken),
      EthereumValue.fromUnsignedBigInt(_sendingAmount)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new Wallet__getExchangeInfoSendingResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getInfo(): Wallet__getInfoResult {
    let result = super.call("getInfo", []);

    return new Wallet__getInfoResult(
      result[0].toAddressArray(),
      result[1].toBigIntArray(),
      result[2].toStringArray()
    );
  }

  try_getInfo(): CallResult<Wallet__getInfoResult> {
    let result = super.tryCall("getInfo", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new Wallet__getInfoResult(
        value[0].toAddressArray(),
        value[1].toBigIntArray(),
        value[2].toStringArray()
      )
    );
  }

  forward(_destination: Address, _data: Bytes): Bytes {
    let result = super.call("forward", [
      EthereumValue.fromAddress(_destination),
      EthereumValue.fromBytes(_data)
    ]);

    return result[0].toBytes();
  }

  try_forward(_destination: Address, _data: Bytes): CallResult<Bytes> {
    let result = super.tryCall("forward", [
      EthereumValue.fromAddress(_destination),
      EthereumValue.fromBytes(_data)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  isValueLimited(): boolean {
    let result = super.call("isValueLimited", []);

    return result[0].toBoolean();
  }

  try_isValueLimited(): CallResult<boolean> {
    let result = super.tryCall("isValueLimited", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", []);

    return result[0].toAddress();
  }

  try_owner(): CallResult<Address> {
    let result = super.tryCall("owner", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  getExchangeInfoReceiving(
    _sendingToken: Address,
    _receivingToken: Address,
    _receivingAmount: BigInt
  ): Wallet__getExchangeInfoReceivingResult {
    let result = super.call("getExchangeInfoReceiving", [
      EthereumValue.fromAddress(_sendingToken),
      EthereumValue.fromAddress(_receivingToken),
      EthereumValue.fromUnsignedBigInt(_receivingAmount)
    ]);

    return new Wallet__getExchangeInfoReceivingResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getExchangeInfoReceiving(
    _sendingToken: Address,
    _receivingToken: Address,
    _receivingAmount: BigInt
  ): CallResult<Wallet__getExchangeInfoReceivingResult> {
    let result = super.tryCall("getExchangeInfoReceiving", [
      EthereumValue.fromAddress(_sendingToken),
      EthereumValue.fromAddress(_receivingToken),
      EthereumValue.fromUnsignedBigInt(_receivingAmount)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new Wallet__getExchangeInfoReceivingResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getSpendToValue(_transferValue: BigInt): BigInt {
    let result = super.call("getSpendToValue", [
      EthereumValue.fromUnsignedBigInt(_transferValue)
    ]);

    return result[0].toBigInt();
  }

  try_getSpendToValue(_transferValue: BigInt): CallResult<BigInt> {
    let result = super.tryCall("getSpendToValue", [
      EthereumValue.fromUnsignedBigInt(_transferValue)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getTokens(): Array<Address> {
    let result = super.call("getTokens", []);

    return result[0].toAddressArray();
  }

  try_getTokens(): CallResult<Array<Address>> {
    let result = super.tryCall("getTokens", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddressArray());
  }

  allowedReceiver(param0: Address): boolean {
    let result = super.call("allowedReceiver", [
      EthereumValue.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_allowedReceiver(param0: Address): CallResult<boolean> {
    let result = super.tryCall("allowedReceiver", [
      EthereumValue.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  getTransferExchangeInfoSending(
    _sendingToken: Address,
    _transferingToken: Address,
    _sendingAmount: BigInt
  ): BigInt {
    let result = super.call("getTransferExchangeInfoSending", [
      EthereumValue.fromAddress(_sendingToken),
      EthereumValue.fromAddress(_transferingToken),
      EthereumValue.fromUnsignedBigInt(_sendingAmount)
    ]);

    return result[0].toBigInt();
  }

  try_getTransferExchangeInfoSending(
    _sendingToken: Address,
    _transferingToken: Address,
    _sendingAmount: BigInt
  ): CallResult<BigInt> {
    let result = super.tryCall("getTransferExchangeInfoSending", [
      EthereumValue.fromAddress(_sendingToken),
      EthereumValue.fromAddress(_transferingToken),
      EthereumValue.fromUnsignedBigInt(_sendingAmount)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getInfoPartial(_first: BigInt, _last: BigInt): Wallet__getInfoPartialResult {
    let result = super.call("getInfoPartial", [
      EthereumValue.fromUnsignedBigInt(_first),
      EthereumValue.fromUnsignedBigInt(_last)
    ]);

    return new Wallet__getInfoPartialResult(
      result[0].toAddressArray(),
      result[1].toBigIntArray(),
      result[2].toStringArray()
    );
  }

  try_getInfoPartial(
    _first: BigInt,
    _last: BigInt
  ): CallResult<Wallet__getInfoPartialResult> {
    let result = super.tryCall("getInfoPartial", [
      EthereumValue.fromUnsignedBigInt(_first),
      EthereumValue.fromUnsignedBigInt(_last)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new Wallet__getInfoPartialResult(
        value[0].toAddressArray(),
        value[1].toBigIntArray(),
        value[2].toStringArray()
      )
    );
  }

  isToLimited(): boolean {
    let result = super.call("isToLimited", []);

    return result[0].toBoolean();
  }

  try_isToLimited(): CallResult<boolean> {
    let result = super.tryCall("isToLimited", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  maxValues(param0: Address): BigInt {
    let result = super.call("maxValues", [EthereumValue.fromAddress(param0)]);

    return result[0].toBigInt();
  }

  try_maxValues(param0: Address): CallResult<BigInt> {
    let result = super.tryCall("maxValues", [
      EthereumValue.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getValueToSpend(_totalAmount: BigInt): BigInt {
    let result = super.call("getValueToSpend", [
      EthereumValue.fromUnsignedBigInt(_totalAmount)
    ]);

    return result[0].toBigInt();
  }

  try_getValueToSpend(_totalAmount: BigInt): CallResult<BigInt> {
    let result = super.tryCall("getValueToSpend", [
      EthereumValue.fromUnsignedBigInt(_totalAmount)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  controller(): Address {
    let result = super.call("controller", []);

    return result[0].toAddress();
  }

  try_controller(): CallResult<Address> {
    let result = super.tryCall("controller", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  forwardValue(
    _tokenAddress: Address,
    _amount: BigInt,
    _destination: Address,
    _data: Bytes
  ): Bytes {
    let result = super.call("forwardValue", [
      EthereumValue.fromAddress(_tokenAddress),
      EthereumValue.fromUnsignedBigInt(_amount),
      EthereumValue.fromAddress(_destination),
      EthereumValue.fromBytes(_data)
    ]);

    return result[0].toBytes();
  }

  try_forwardValue(
    _tokenAddress: Address,
    _amount: BigInt,
    _destination: Address,
    _data: Bytes
  ): CallResult<Bytes> {
    let result = super.tryCall("forwardValue", [
      EthereumValue.fromAddress(_tokenAddress),
      EthereumValue.fromUnsignedBigInt(_amount),
      EthereumValue.fromAddress(_destination),
      EthereumValue.fromBytes(_data)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }
}

export class TransferCall extends EthereumCall {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get _tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }
}

export class TransferExchangeDomainSendingCall extends EthereumCall {
  get inputs(): TransferExchangeDomainSendingCall__Inputs {
    return new TransferExchangeDomainSendingCall__Inputs(this);
  }

  get outputs(): TransferExchangeDomainSendingCall__Outputs {
    return new TransferExchangeDomainSendingCall__Outputs(this);
  }
}

export class TransferExchangeDomainSendingCall__Inputs {
  _call: TransferExchangeDomainSendingCall;

  constructor(call: TransferExchangeDomainSendingCall) {
    this._call = call;
  }

  get _sendingToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _transferingToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _sendingAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _name(): string {
    return this._call.inputValues[3].value.toString();
  }

  get _data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class TransferExchangeDomainSendingCall__Outputs {
  _call: TransferExchangeDomainSendingCall;

  constructor(call: TransferExchangeDomainSendingCall) {
    this._call = call;
  }
}

export class TokenFallbackCall extends EthereumCall {
  get inputs(): TokenFallbackCall__Inputs {
    return new TokenFallbackCall__Inputs(this);
  }

  get outputs(): TokenFallbackCall__Outputs {
    return new TokenFallbackCall__Outputs(this);
  }
}

export class TokenFallbackCall__Inputs {
  _call: TokenFallbackCall;

  constructor(call: TokenFallbackCall) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TokenFallbackCall__Outputs {
  _call: TokenFallbackCall;

  constructor(call: TokenFallbackCall) {
    this._call = call;
  }
}

export class SetDexOrderCall extends EthereumCall {
  get inputs(): SetDexOrderCall__Inputs {
    return new SetDexOrderCall__Inputs(this);
  }

  get outputs(): SetDexOrderCall__Outputs {
    return new SetDexOrderCall__Outputs(this);
  }
}

export class SetDexOrderCall__Inputs {
  _call: SetDexOrderCall;

  constructor(call: SetDexOrderCall) {
    this._call = call;
  }

  get _tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _receiving(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _price(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _side(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _exchangeAddress(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class SetDexOrderCall__Outputs {
  _call: SetDexOrderCall;

  constructor(call: SetDexOrderCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class ForwardCall extends EthereumCall {
  get inputs(): ForwardCall__Inputs {
    return new ForwardCall__Inputs(this);
  }

  get outputs(): ForwardCall__Outputs {
    return new ForwardCall__Outputs(this);
  }
}

export class ForwardCall__Inputs {
  _call: ForwardCall;

  constructor(call: ForwardCall) {
    this._call = call;
  }

  get _destination(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class ForwardCall__Outputs {
  _call: ForwardCall;

  constructor(call: ForwardCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class TransferDomainSendingCall extends EthereumCall {
  get inputs(): TransferDomainSendingCall__Inputs {
    return new TransferDomainSendingCall__Inputs(this);
  }

  get outputs(): TransferDomainSendingCall__Outputs {
    return new TransferDomainSendingCall__Outputs(this);
  }
}

export class TransferDomainSendingCall__Inputs {
  _call: TransferDomainSendingCall;

  constructor(call: TransferDomainSendingCall) {
    this._call = call;
  }

  get _tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _name(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class TransferDomainSendingCall__Outputs {
  _call: TransferDomainSendingCall;

  constructor(call: TransferDomainSendingCall) {
    this._call = call;
  }
}

export class TransferDomainCall extends EthereumCall {
  get inputs(): TransferDomainCall__Inputs {
    return new TransferDomainCall__Inputs(this);
  }

  get outputs(): TransferDomainCall__Outputs {
    return new TransferDomainCall__Outputs(this);
  }
}

export class TransferDomainCall__Inputs {
  _call: TransferDomainCall;

  constructor(call: TransferDomainCall) {
    this._call = call;
  }

  get _tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _name(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class TransferDomainCall__Outputs {
  _call: TransferDomainCall;

  constructor(call: TransferDomainCall) {
    this._call = call;
  }
}

export class TransferSendingCall extends EthereumCall {
  get inputs(): TransferSendingCall__Inputs {
    return new TransferSendingCall__Inputs(this);
  }

  get outputs(): TransferSendingCall__Outputs {
    return new TransferSendingCall__Outputs(this);
  }
}

export class TransferSendingCall__Inputs {
  _call: TransferSendingCall;

  constructor(call: TransferSendingCall) {
    this._call = call;
  }

  get _tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class TransferSendingCall__Outputs {
  _call: TransferSendingCall;

  constructor(call: TransferSendingCall) {
    this._call = call;
  }
}

export class ExchangeCall extends EthereumCall {
  get inputs(): ExchangeCall__Inputs {
    return new ExchangeCall__Inputs(this);
  }

  get outputs(): ExchangeCall__Outputs {
    return new ExchangeCall__Outputs(this);
  }
}

export class ExchangeCall__Inputs {
  _call: ExchangeCall;

  constructor(call: ExchangeCall) {
    this._call = call;
  }

  get _sendingToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _receivingToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ExchangeCall__Outputs {
  _call: ExchangeCall;

  constructor(call: ExchangeCall) {
    this._call = call;
  }
}

export class TransferExchangeDomainReceivingCall extends EthereumCall {
  get inputs(): TransferExchangeDomainReceivingCall__Inputs {
    return new TransferExchangeDomainReceivingCall__Inputs(this);
  }

  get outputs(): TransferExchangeDomainReceivingCall__Outputs {
    return new TransferExchangeDomainReceivingCall__Outputs(this);
  }
}

export class TransferExchangeDomainReceivingCall__Inputs {
  _call: TransferExchangeDomainReceivingCall;

  constructor(call: TransferExchangeDomainReceivingCall) {
    this._call = call;
  }

  get _sendingToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _transferingToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _transferingAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _name(): string {
    return this._call.inputValues[3].value.toString();
  }

  get _data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class TransferExchangeDomainReceivingCall__Outputs {
  _call: TransferExchangeDomainReceivingCall;

  constructor(call: TransferExchangeDomainReceivingCall) {
    this._call = call;
  }
}

export class LimitToCall extends EthereumCall {
  get inputs(): LimitToCall__Inputs {
    return new LimitToCall__Inputs(this);
  }

  get outputs(): LimitToCall__Outputs {
    return new LimitToCall__Outputs(this);
  }
}

export class LimitToCall__Inputs {
  _call: LimitToCall;

  constructor(call: LimitToCall) {
    this._call = call;
  }

  get _receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class LimitToCall__Outputs {
  _call: LimitToCall;

  constructor(call: LimitToCall) {
    this._call = call;
  }
}

export class KillCall extends EthereumCall {
  get inputs(): KillCall__Inputs {
    return new KillCall__Inputs(this);
  }

  get outputs(): KillCall__Outputs {
    return new KillCall__Outputs(this);
  }
}

export class KillCall__Inputs {
  _call: KillCall;

  constructor(call: KillCall) {
    this._call = call;
  }

  get _collector(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class KillCall__Outputs {
  _call: KillCall;

  constructor(call: KillCall) {
    this._call = call;
  }
}

export class UnlimitToCall extends EthereumCall {
  get inputs(): UnlimitToCall__Inputs {
    return new UnlimitToCall__Inputs(this);
  }

  get outputs(): UnlimitToCall__Outputs {
    return new UnlimitToCall__Outputs(this);
  }
}

export class UnlimitToCall__Inputs {
  _call: UnlimitToCall;

  constructor(call: UnlimitToCall) {
    this._call = call;
  }
}

export class UnlimitToCall__Outputs {
  _call: UnlimitToCall;

  constructor(call: UnlimitToCall) {
    this._call = call;
  }
}

export class TransferExchangeSendingCall extends EthereumCall {
  get inputs(): TransferExchangeSendingCall__Inputs {
    return new TransferExchangeSendingCall__Inputs(this);
  }

  get outputs(): TransferExchangeSendingCall__Outputs {
    return new TransferExchangeSendingCall__Outputs(this);
  }
}

export class TransferExchangeSendingCall__Inputs {
  _call: TransferExchangeSendingCall;

  constructor(call: TransferExchangeSendingCall) {
    this._call = call;
  }

  get _sendingToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _transferingToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _sendingAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _to(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class TransferExchangeSendingCall__Outputs {
  _call: TransferExchangeSendingCall;

  constructor(call: TransferExchangeSendingCall) {
    this._call = call;
  }
}

export class UnlimitValueCall extends EthereumCall {
  get inputs(): UnlimitValueCall__Inputs {
    return new UnlimitValueCall__Inputs(this);
  }

  get outputs(): UnlimitValueCall__Outputs {
    return new UnlimitValueCall__Outputs(this);
  }
}

export class UnlimitValueCall__Inputs {
  _call: UnlimitValueCall;

  constructor(call: UnlimitValueCall) {
    this._call = call;
  }
}

export class UnlimitValueCall__Outputs {
  _call: UnlimitValueCall;

  constructor(call: UnlimitValueCall) {
    this._call = call;
  }
}

export class TransferExchangeReceivingCall extends EthereumCall {
  get inputs(): TransferExchangeReceivingCall__Inputs {
    return new TransferExchangeReceivingCall__Inputs(this);
  }

  get outputs(): TransferExchangeReceivingCall__Outputs {
    return new TransferExchangeReceivingCall__Outputs(this);
  }
}

export class TransferExchangeReceivingCall__Inputs {
  _call: TransferExchangeReceivingCall;

  constructor(call: TransferExchangeReceivingCall) {
    this._call = call;
  }

  get _sendingToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _transferingToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _transferingAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _to(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class TransferExchangeReceivingCall__Outputs {
  _call: TransferExchangeReceivingCall;

  constructor(call: TransferExchangeReceivingCall) {
    this._call = call;
  }
}

export class LimitValueCall extends EthereumCall {
  get inputs(): LimitValueCall__Inputs {
    return new LimitValueCall__Inputs(this);
  }

  get outputs(): LimitValueCall__Outputs {
    return new LimitValueCall__Outputs(this);
  }
}

export class LimitValueCall__Inputs {
  _call: LimitValueCall;

  constructor(call: LimitValueCall) {
    this._call = call;
  }

  get _tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _limit(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class LimitValueCall__Outputs {
  _call: LimitValueCall;

  constructor(call: LimitValueCall) {
    this._call = call;
  }
}

export class ForwardValueCall extends EthereumCall {
  get inputs(): ForwardValueCall__Inputs {
    return new ForwardValueCall__Inputs(this);
  }

  get outputs(): ForwardValueCall__Outputs {
    return new ForwardValueCall__Outputs(this);
  }
}

export class ForwardValueCall__Inputs {
  _call: ForwardValueCall;

  constructor(call: ForwardValueCall) {
    this._call = call;
  }

  get _tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _destination(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class ForwardValueCall__Outputs {
  _call: ForwardValueCall;

  constructor(call: ForwardValueCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class ConstructorCall extends EthereumCall {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _identityAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _controllerAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends EthereumCall {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}
