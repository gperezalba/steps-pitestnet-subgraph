// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class Forward extends EthereumEvent {
  get params(): Forward__Params {
    return new Forward__Params(this);
  }
}

export class Forward__Params {
  _event: Forward;

  constructor(event: Forward) {
    this._event = event;
  }

  get destination(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get data(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class FactoryForward extends EthereumEvent {
  get params(): FactoryForward__Params {
    return new FactoryForward__Params(this);
  }
}

export class FactoryForward__Params {
  _event: FactoryForward;

  constructor(event: FactoryForward) {
    this._event = event;
  }

  get kind(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get contractAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NewOwner extends EthereumEvent {
  get params(): NewOwner__Params {
    return new NewOwner__Params(this);
  }
}

export class NewOwner__Params {
  _event: NewOwner;

  constructor(event: NewOwner) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get old(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get current(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class NewRecovery extends EthereumEvent {
  get params(): NewRecovery__Params {
    return new NewRecovery__Params(this);
  }
}

export class NewRecovery__Params {
  _event: NewRecovery;

  constructor(event: NewRecovery) {
    this._event = event;
  }

  get old(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get current(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NewName extends EthereumEvent {
  get params(): NewName__Params {
    return new NewName__Params(this);
  }
}

export class NewName__Params {
  _event: NewName;

  constructor(event: NewName) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get old(): string {
    return this._event.parameters[1].value.toString();
  }

  get current(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class NewWallet extends EthereumEvent {
  get params(): NewWallet__Params {
    return new NewWallet__Params(this);
  }
}

export class NewWallet__Params {
  _event: NewWallet;

  constructor(event: NewWallet) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get old(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get current(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Identity extends SmartContract {
  static bind(address: Address): Identity {
    return new Identity("Identity", address);
  }

  name(): string {
    let result = super.call("name", []);

    return result[0].toString();
  }

  try_name(): CallResult<string> {
    let result = super.tryCall("name", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toString());
  }

  forwardFactory(_factory: Address, _data: Bytes): Address {
    let result = super.call("forwardFactory", [
      EthereumValue.fromAddress(_factory),
      EthereumValue.fromBytes(_data)
    ]);

    return result[0].toAddress();
  }

  try_forwardFactory(_factory: Address, _data: Bytes): CallResult<Address> {
    let result = super.tryCall("forwardFactory", [
      EthereumValue.fromAddress(_factory),
      EthereumValue.fromBytes(_data)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  globalIndex(param0: BigInt): BigInt {
    let result = super.call("globalIndex", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_globalIndex(param0: BigInt): CallResult<BigInt> {
    let result = super.tryCall("globalIndex", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  kindOfAddress(param0: Address): BigInt {
    let result = super.call("kindOfAddress", [
      EthereumValue.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_kindOfAddress(param0: Address): CallResult<BigInt> {
    let result = super.tryCall("kindOfAddress", [
      EthereumValue.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  addressesByKind(param0: BigInt, param1: BigInt): Address {
    let result = super.call("addressesByKind", [
      EthereumValue.fromUnsignedBigInt(param0),
      EthereumValue.fromUnsignedBigInt(param1)
    ]);

    return result[0].toAddress();
  }

  try_addressesByKind(param0: BigInt, param1: BigInt): CallResult<Address> {
    let result = super.tryCall("addressesByKind", [
      EthereumValue.fromUnsignedBigInt(param0),
      EthereumValue.fromUnsignedBigInt(param1)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  wallet(): Address {
    let result = super.call("wallet", []);

    return result[0].toAddress();
  }

  try_wallet(): CallResult<Address> {
    let result = super.tryCall("wallet", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  forward(_destination: Address, _data: Bytes): Bytes {
    let result = super.call("forward", [
      EthereumValue.fromAddress(_destination),
      EthereumValue.fromBytes(_data)
    ]);

    return result[0].toBytes();
  }

  try_forward(_destination: Address, _data: Bytes): CallResult<Bytes> {
    let result = super.tryCall("forward", [
      EthereumValue.fromAddress(_destination),
      EthereumValue.fromBytes(_data)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", []);

    return result[0].toAddress();
  }

  try_owner(): CallResult<Address> {
    let result = super.tryCall("owner", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  state(): BigInt {
    let result = super.call("state", []);

    return result[0].toBigInt();
  }

  try_state(): CallResult<BigInt> {
    let result = super.tryCall("state", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  minBalance(): BigInt {
    let result = super.call("minBalance", []);

    return result[0].toBigInt();
  }

  try_minBalance(): CallResult<BigInt> {
    let result = super.tryCall("minBalance", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  recovery(): Address {
    let result = super.call("recovery", []);

    return result[0].toAddress();
  }

  try_recovery(): CallResult<Address> {
    let result = super.tryCall("recovery", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  getAddressesByKind(_kind: BigInt): Array<Address> {
    let result = super.call("getAddressesByKind", [
      EthereumValue.fromUnsignedBigInt(_kind)
    ]);

    return result[0].toAddressArray();
  }

  try_getAddressesByKind(_kind: BigInt): CallResult<Array<Address>> {
    let result = super.tryCall("getAddressesByKind", [
      EthereumValue.fromUnsignedBigInt(_kind)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddressArray());
  }

  indexOf(param0: Address): BigInt {
    let result = super.call("indexOf", [EthereumValue.fromAddress(param0)]);

    return result[0].toBigInt();
  }

  try_indexOf(param0: Address): CallResult<BigInt> {
    let result = super.tryCall("indexOf", [EthereumValue.fromAddress(param0)]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }
}

export class SetOwnerCall extends EthereumCall {
  get inputs(): SetOwnerCall__Inputs {
    return new SetOwnerCall__Inputs(this);
  }

  get outputs(): SetOwnerCall__Outputs {
    return new SetOwnerCall__Outputs(this);
  }
}

export class SetOwnerCall__Inputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }

  get _newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOwnerCall__Outputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }
}

export class SetFirstWalletCall extends EthereumCall {
  get inputs(): SetFirstWalletCall__Inputs {
    return new SetFirstWalletCall__Inputs(this);
  }

  get outputs(): SetFirstWalletCall__Outputs {
    return new SetFirstWalletCall__Outputs(this);
  }
}

export class SetFirstWalletCall__Inputs {
  _call: SetFirstWalletCall;

  constructor(call: SetFirstWalletCall) {
    this._call = call;
  }

  get _walletAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFirstWalletCall__Outputs {
  _call: SetFirstWalletCall;

  constructor(call: SetFirstWalletCall) {
    this._call = call;
  }
}

export class ForwardFactoryCall extends EthereumCall {
  get inputs(): ForwardFactoryCall__Inputs {
    return new ForwardFactoryCall__Inputs(this);
  }

  get outputs(): ForwardFactoryCall__Outputs {
    return new ForwardFactoryCall__Outputs(this);
  }
}

export class ForwardFactoryCall__Inputs {
  _call: ForwardFactoryCall;

  constructor(call: ForwardFactoryCall) {
    this._call = call;
  }

  get _factory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class ForwardFactoryCall__Outputs {
  _call: ForwardFactoryCall;

  constructor(call: ForwardFactoryCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class ForwardCall extends EthereumCall {
  get inputs(): ForwardCall__Inputs {
    return new ForwardCall__Inputs(this);
  }

  get outputs(): ForwardCall__Outputs {
    return new ForwardCall__Outputs(this);
  }
}

export class ForwardCall__Inputs {
  _call: ForwardCall;

  constructor(call: ForwardCall) {
    this._call = call;
  }

  get _destination(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class ForwardCall__Outputs {
  _call: ForwardCall;

  constructor(call: ForwardCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class SetStateCall extends EthereumCall {
  get inputs(): SetStateCall__Inputs {
    return new SetStateCall__Inputs(this);
  }

  get outputs(): SetStateCall__Outputs {
    return new SetStateCall__Outputs(this);
  }
}

export class SetStateCall__Inputs {
  _call: SetStateCall;

  constructor(call: SetStateCall) {
    this._call = call;
  }

  get _newState(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetStateCall__Outputs {
  _call: SetStateCall;

  constructor(call: SetStateCall) {
    this._call = call;
  }
}

export class RemoveAddressCall extends EthereumCall {
  get inputs(): RemoveAddressCall__Inputs {
    return new RemoveAddressCall__Inputs(this);
  }

  get outputs(): RemoveAddressCall__Outputs {
    return new RemoveAddressCall__Outputs(this);
  }
}

export class RemoveAddressCall__Inputs {
  _call: RemoveAddressCall;

  constructor(call: RemoveAddressCall) {
    this._call = call;
  }
}

export class RemoveAddressCall__Outputs {
  _call: RemoveAddressCall;

  constructor(call: RemoveAddressCall) {
    this._call = call;
  }
}

export class SetNameCall extends EthereumCall {
  get inputs(): SetNameCall__Inputs {
    return new SetNameCall__Inputs(this);
  }

  get outputs(): SetNameCall__Outputs {
    return new SetNameCall__Outputs(this);
  }
}

export class SetNameCall__Inputs {
  _call: SetNameCall;

  constructor(call: SetNameCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetNameCall__Outputs {
  _call: SetNameCall;

  constructor(call: SetNameCall) {
    this._call = call;
  }
}

export class SetWalletCall extends EthereumCall {
  get inputs(): SetWalletCall__Inputs {
    return new SetWalletCall__Inputs(this);
  }

  get outputs(): SetWalletCall__Outputs {
    return new SetWalletCall__Outputs(this);
  }
}

export class SetWalletCall__Inputs {
  _call: SetWalletCall;

  constructor(call: SetWalletCall) {
    this._call = call;
  }

  get _walletAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetWalletCall__Outputs {
  _call: SetWalletCall;

  constructor(call: SetWalletCall) {
    this._call = call;
  }
}

export class ForwardValueCall extends EthereumCall {
  get inputs(): ForwardValueCall__Inputs {
    return new ForwardValueCall__Inputs(this);
  }

  get outputs(): ForwardValueCall__Outputs {
    return new ForwardValueCall__Outputs(this);
  }
}

export class ForwardValueCall__Inputs {
  _call: ForwardValueCall;

  constructor(call: ForwardValueCall) {
    this._call = call;
  }

  get _destination(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class ForwardValueCall__Outputs {
  _call: ForwardValueCall;

  constructor(call: ForwardValueCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class SetRecoveryCall extends EthereumCall {
  get inputs(): SetRecoveryCall__Inputs {
    return new SetRecoveryCall__Inputs(this);
  }

  get outputs(): SetRecoveryCall__Outputs {
    return new SetRecoveryCall__Outputs(this);
  }
}

export class SetRecoveryCall__Inputs {
  _call: SetRecoveryCall;

  constructor(call: SetRecoveryCall) {
    this._call = call;
  }

  get _newRecovery(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetRecoveryCall__Outputs {
  _call: SetRecoveryCall;

  constructor(call: SetRecoveryCall) {
    this._call = call;
  }
}

export class ConstructorCall extends EthereumCall {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _recovery(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _name(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _controllerAddress(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends EthereumCall {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}
