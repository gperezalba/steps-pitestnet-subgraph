// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class CreateName extends EthereumEvent {
  get params(): CreateName__Params {
    return new CreateName__Params(this);
  }
}

export class CreateName__Params {
  _event: CreateName;

  constructor(event: CreateName) {
    this._event = event;
  }

  get name(): string {
    return this._event.parameters[0].value.toString();
  }

  get wallet(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class ChangeWallet extends EthereumEvent {
  get params(): ChangeWallet__Params {
    return new ChangeWallet__Params(this);
  }
}

export class ChangeWallet__Params {
  _event: ChangeWallet;

  constructor(event: ChangeWallet) {
    this._event = event;
  }

  get name(): string {
    return this._event.parameters[0].value.toString();
  }

  get wallet(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ChangeOwner extends EthereumEvent {
  get params(): ChangeOwner__Params {
    return new ChangeOwner__Params(this);
  }
}

export class ChangeOwner__Params {
  _event: ChangeOwner;

  constructor(event: ChangeOwner) {
    this._event = event;
  }

  get name(): string {
    return this._event.parameters[0].value.toString();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NameService extends SmartContract {
  static bind(address: Address): NameService {
    return new NameService("NameService", address);
  }

  name(_addr: Address): string {
    let result = super.call("name", [EthereumValue.fromAddress(_addr)]);

    return result[0].toString();
  }

  try_name(_addr: Address): CallResult<string> {
    let result = super.tryCall("name", [EthereumValue.fromAddress(_addr)]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toString());
  }

  addr(_nameHash: Bytes): Address {
    let result = super.call("addr", [EthereumValue.fromFixedBytes(_nameHash)]);

    return result[0].toAddress();
  }

  try_addr(_nameHash: Bytes): CallResult<Address> {
    let result = super.tryCall("addr", [
      EthereumValue.fromFixedBytes(_nameHash)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  nameOwners(param0: Bytes): Address {
    let result = super.call("nameOwners", [
      EthereumValue.fromFixedBytes(param0)
    ]);

    return result[0].toAddress();
  }

  try_nameOwners(param0: Bytes): CallResult<Address> {
    let result = super.tryCall("nameOwners", [
      EthereumValue.fromFixedBytes(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  addr1(_name: string): Address {
    let result = super.call("addr", [EthereumValue.fromString(_name)]);

    return result[0].toAddress();
  }

  try_addr1(_name: string): CallResult<Address> {
    let result = super.tryCall("addr", [EthereumValue.fromString(_name)]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  nameIsAvailable(_nameHash: Bytes): boolean {
    let result = super.call("nameIsAvailable", [
      EthereumValue.fromFixedBytes(_nameHash)
    ]);

    return result[0].toBoolean();
  }

  try_nameIsAvailable(_nameHash: Bytes): CallResult<boolean> {
    let result = super.tryCall("nameIsAvailable", [
      EthereumValue.fromFixedBytes(_nameHash)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  names(param0: Address): string {
    let result = super.call("names", [EthereumValue.fromAddress(param0)]);

    return result[0].toString();
  }

  try_names(param0: Address): CallResult<string> {
    let result = super.tryCall("names", [EthereumValue.fromAddress(param0)]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toString());
  }

  addresses(param0: Bytes): Address {
    let result = super.call("addresses", [
      EthereumValue.fromFixedBytes(param0)
    ]);

    return result[0].toAddress();
  }

  try_addresses(param0: Bytes): CallResult<Address> {
    let result = super.tryCall("addresses", [
      EthereumValue.fromFixedBytes(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", []);

    return result[0].toAddress();
  }

  try_owner(): CallResult<Address> {
    let result = super.tryCall("owner", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  isNameOwner(_nameHash: Bytes): boolean {
    let result = super.call("isNameOwner", [
      EthereumValue.fromFixedBytes(_nameHash)
    ]);

    return result[0].toBoolean();
  }

  try_isNameOwner(_nameHash: Bytes): CallResult<boolean> {
    let result = super.tryCall("isNameOwner", [
      EthereumValue.fromFixedBytes(_nameHash)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }
}

export class CreateNameCall extends EthereumCall {
  get inputs(): CreateNameCall__Inputs {
    return new CreateNameCall__Inputs(this);
  }

  get outputs(): CreateNameCall__Outputs {
    return new CreateNameCall__Outputs(this);
  }
}

export class CreateNameCall__Inputs {
  _call: CreateNameCall;

  constructor(call: CreateNameCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _wallet(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _owner(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class CreateNameCall__Outputs {
  _call: CreateNameCall;

  constructor(call: CreateNameCall) {
    this._call = call;
  }
}

export class ChangeWalletCall extends EthereumCall {
  get inputs(): ChangeWalletCall__Inputs {
    return new ChangeWalletCall__Inputs(this);
  }

  get outputs(): ChangeWalletCall__Outputs {
    return new ChangeWalletCall__Outputs(this);
  }
}

export class ChangeWalletCall__Inputs {
  _call: ChangeWalletCall;

  constructor(call: ChangeWalletCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _wallet(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ChangeWalletCall__Outputs {
  _call: ChangeWalletCall;

  constructor(call: ChangeWalletCall) {
    this._call = call;
  }
}

export class ChangeNameOwnerCall extends EthereumCall {
  get inputs(): ChangeNameOwnerCall__Inputs {
    return new ChangeNameOwnerCall__Inputs(this);
  }

  get outputs(): ChangeNameOwnerCall__Outputs {
    return new ChangeNameOwnerCall__Outputs(this);
  }
}

export class ChangeNameOwnerCall__Inputs {
  _call: ChangeNameOwnerCall;

  constructor(call: ChangeNameOwnerCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _newOwner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ChangeNameOwnerCall__Outputs {
  _call: ChangeNameOwnerCall;

  constructor(call: ChangeNameOwnerCall) {
    this._call = call;
  }
}

export class ConstructorCall extends EthereumCall {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _controllerAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}
